package server;

//Import certain classes from different packages
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class ChatServer implements Runnable {
	private int client_Iteration = 0;
	private ChatServerSupport Array_Client[] = new ChatServerSupport[50];
    private Thread thread = null;
	private ServerSocket server = null;

	/*Use Hashmaps to create dataframe of all clients who connect and what chatrooms 
	 they connect to in order to 'organise' joining and leaving.
	*/
	Map<String, Integer> chatroomDatabase = new HashMap<String, Integer>();

	
	String heloText = "HELO";
	//Fixed response to HELO message from question (introduction)
	static String Helo_Response = "%s\nIP:%s\nPort:%s\nStudentID:%s\n";

	//Request and Response structures taken from question
	
	// Request to join chatroom 
	static String Join_Chatroom_Request  = "(?s)JOIN_CHATROOM:(.*)CLIENT_IP:(.*)PORT:(.*)CLIENT_NAME:(.*)";
	// Response to join chatroom 
	static String Join_Chatroom_Response = "JOINED_CHATROOM:%s\nSERVER_IP:%s\nPORT:%s\nROOM_REF:%s\nJOIN_ID:%s\n";
	
	// Request to leave chatroom 
	static String Leave_Chatroom_Request  = "(?s)LEAVE_CHATROOM:(.*)JOIN_ID:(.*)CLIENT_NAME:(.*)";
	// Response to leave chatroom 
	static String Leave_Chatroom_Response = "LEFT_CHATROOM:%s\nJOIN_ID:%s\n";
	
	//Disconnect from Chatroom
	static String Disconnect_Chatroom_Request = "(?s)DISCONNECT:(.*)PORT:(.*)CLIENT_NAME:(.*)";

	//What is this doing?
	public String getUniqueID() {

		return String.valueOf(System.currentTimeMillis());
	}

	public ChatServer(int port) {
		try {
			System.out.println("Binding to port " + port);
			server = new ServerSocket(port);
			System.out.println("Commencing server: " + server);
			start();
		} catch (IOException ioe) {
			System.out.println("Unable to bind to port number " + port + "due to " + ioe.getMessage());
		}
	}

	public void run() {
		while (thread != null) {
			try {
				System.out.println("Waiting for a client to join the chatroom ");
				addthread(server.accept());
			} catch (IOException ioe) {
				System.out.println("Error in accepting client(s): " + ioe);
				stop();
			}
		}
	}

	public void start() {
		if (thread == null) {
			thread = new Thread(this);
			thread.start();
			System.out.println("The chat thread has started");
		}
	}

	public void stop() {
		if (thread != null) {
			thread.stop();
			thread = null;
		}
	}

	private int Get_Client(int ID) {
		for (int j = 0; j < client_Iteration; j++)
			if (Array_Client[j].findID() == ID)
				return j;
		return -1;
	}

	public synchronized void handle(int ID, String input) {
		if (input.equals(".bye")) {
			Array_Client[Get_Client(ID)].send(".bye");
			remove(ID);
		} else if (input.startsWith(heloText)){
			Array_Client[Get_Client(ID)].send(manageHeloMessage(input));
			
		} else if (input.matches(Join_Chatroom_Request)){
			Array_Client[Get_Client(ID)].send(DecodeJoinMessage(input));
			
		}else if (input.matches(Leave_Chatroom_Request)){
			Array_Client[Get_Client(ID)].send(DecodeLeaveMessage(input));
			
		}else if (input.matches(Disconnect_Chatroom_Request)){
			System.out.println("Client is being disconnected");
			remove(ID);
		}else
			for (int j = 0; j < client_Iteration; j++)
				Array_Client[j].send(ID + ": " + input);
	}
	
	//This piece of code decodes the join message; code has been optimised from original attempt

	private synchronized String DecodeJoinMessage(String input) {

		System.out.println("DecodeJoinMessage:Request:" + input);

		String Chatroom_Name = "";
		String Client_IP = "";
		String Client_Port = "";
		String Client_Handle = "";

		Matcher Join_Chatroom_Request_matcher = Pattern.compile(Join_Chatroom_Request).matcher(input);

		while (Join_Chatroom_Request_matcher.find()) {

			Chatroom_Name = Join_Chatroom_Request_matcher.group(1);
			Client_IP = Join_Chatroom_Request_matcher.group(2);
			Client_Port = Join_Chatroom_Request_matcher.group(3);
			Client_Handle = Join_Chatroom_Request_matcher.group(4);
		}
		
		stripNewLineChar(Chatroom_Name);

		Join_Chatroom_Response = String.format(Join_Chatroom_Response, Chatroom_Name, server.getInetAddress(), server.getLocalPort(), server.hashCode(), 1);
		System.out.println("DecodeJoinMessage:Response:" + Join_Chatroom_Response);
		return Join_Chatroom_Response;
	}
	
	private String stripNewLineChar(String strVal) {
		
		System.out.println("Incoming:"+strVal);
		
		if (strVal != null && !strVal.isEmpty()){
			
			System.out.println(strVal.contains("\n"));
			
			return strVal.replace("\n", "");
		}
		return strVal;
	}

	private synchronized String DecodeLeaveMessage(String input) {

		System.out.println("DecodeLeaveMessage:Request" + input);

		String Chatroom_Name = "";
		String JOIN_ID = "";
		String CLIENT_NAME = "";

		Matcher Join_Chatroom_Request_matcher = Pattern.compile(Leave_Chatroom_Request).matcher(input);

		while (Join_Chatroom_Request_matcher.find()) {

			Chatroom_Name = Join_Chatroom_Request_matcher.group(1);
			JOIN_ID = Join_Chatroom_Request_matcher.group(2);
			CLIENT_NAME = Join_Chatroom_Request_matcher.group(3);
		}

		Leave_Chatroom_Response = String.format(Leave_Chatroom_Response, Chatroom_Name, JOIN_ID);
		System.out.println("DecodeLeaveMessage:Response" + Leave_Chatroom_Response);
		return Leave_Chatroom_Response;
	}

	public synchronized String manageHeloMessage(String inputMessage) {

		Helo_Response = String.format(Helo_Response, inputMessage, server.getInetAddress(), server.getLocalPort(), "1234567");
		return Helo_Response;

	}
	
	public synchronized void remove(int ID) {
		int pos = Get_Client(ID);
		if (pos >= 0) {
			ChatServerSupport toTerminate = Array_Client[pos];
			System.out.println("Client " + ID + " is being removed from " + pos);
			if (pos < client_Iteration - 1)
				for (int j = pos + 1; j < client_Iteration; j++)
					Array_Client[j - 1] = Array_Client[j];
			client_Iteration--;
			try {
				toTerminate.close();
			} catch (IOException ioe) {
				System.out.println("Error closing thread: " + ioe);
			}
			toTerminate.stop();
		}
	}

	private void addthread(Socket socket) {
		if (client_Iteration < Array_Client.length) {
			System.out.println("Client has been accepted to: " + socket);
			Array_Client[client_Iteration] = new ChatServerSupport(this, socket);
			try {
				Array_Client[client_Iteration].open();
				Array_Client[client_Iteration].start();
				client_Iteration++;
			} catch (IOException ioe) {
				System.out.println("Error opening thread: " + ioe);
			}
		} else
			System.out.println("The maximum length, " + Array_Client.length + ", has been reached.");
	}

	public static void main(String args[]) {
		ChatServer server = new ChatServer(4444);
	}
}
